"""
Interfaces and contracts for the Password Manager application.
Defines the contracts that ensure proper MVC pattern implementation.
"""

from typing import Protocol

class ViewInterface(Protocol):
    """Interface for view components to ensure loose coupling."""
    
    def on_login_successful(self, username: str) -> None: ...
    def on_login_failed(self, error_message: str) -> None: ...
    def on_logout_successful(self) -> None: ...
    def on_registration_successful(self, username: str) -> None: ...
    def on_registration_failed(self, error_message: str) -> None: ...
    def on_entries_updated(self, entries: list[dict]) -> None: ...
    def on_entry_added(self, entry: dict) -> None: ...
    def on_entry_updated(self, entry: dict) -> None: ...
    def on_entry_deleted(self, entry_id: int) -> None: ...
    def on_password_generated(self, password: str) -> None: ...
    def on_error_occurred(self, error_message: str) -> None: ...
    def on_master_password_changed(self) -> None: ...

class ModelInterface(Protocol):
    """Interface for model components to ensure proper data handling."""
    
    def register_user(self, username: str, master_password: str) -> tuple[bool, str]: ...
    def login_user(self, username: str, master_password: str) -> tuple[bool, str]: ...
    def logout_user(self) -> tuple[bool, str]: ...
    def is_logged_in(self) -> bool: ...
    def add_entry(self, name: str, address: str, username_entry: str, 
                  password_entry: str, notes: str) -> tuple[bool, str]: ...
    def view_entries(self) -> tuple[bool, str | list[dict]]: ...
    def get_entry_by_id(self, entry_id: int) -> tuple[bool, str | dict]: ...
    def edit_entry(self, entry_id: int, new_name: str, new_address: str, 
                   new_username_entry: str, new_password_entry: str, 
                   new_notes: str) -> tuple[bool, str]: ...
    def remove_entry(self, entry_id: int) -> tuple[bool, str]: ...
    def change_master_password(self, old_master_password: str, 
                              new_master_password: str) -> tuple[bool, str]: ...
    def generate_random_password(self, length: int, use_uppercase: bool,
                                use_lowercase: bool, use_digits: bool,
                                use_special_chars: bool) -> tuple[bool, str]: ... 